"use strict";(self.webpackChunksc_tree=self.webpackChunksc_tree||[]).push([[9957],{89957:(e,t,n)=>{n.r(t),n.d(t,{invokeGeometryOp:()=>s});var i=n(89379),r=n(19902);function a(e,t){let n;return{loaded:!1,load:()=>null!==n&&void 0!==n?n:n=t().then(t=>{o[e]={loaded:!0,execute:t}})}}function c(e){return null==e?null:e.toJSON()}const o={disjoint:a("disjoint",()=>n.e(352).then(n.bind(n,80352)).then(e=>e.execute)),intersects:a("intersects",()=>n.e(5838).then(n.bind(n,95838)).then(e=>e.execute)),touches:a("touches",()=>n.e(6521).then(n.bind(n,66521)).then(e=>e.execute)),crosses:a("crosses",()=>n.e(6050).then(n.bind(n,56050)).then(e=>e.execute)),within:a("within",()=>n.e(1475).then(n.bind(n,51475)).then(e=>e.execute)),contains:a("contains",()=>n.e(7353).then(n.bind(n,27353)).then(e=>e.execute)),overlaps:a("overlaps",()=>n.e(4744).then(n.bind(n,34744)).then(e=>e.execute)),equals:a("equals",async()=>{const e=await n.e(2442).then(n.bind(n,72442));return(t,n)=>e.execute((0,r.rS)(t),(0,r.rS)(n))}),relate:a("relate",async()=>{const e=await n.e(6358).then(n.bind(n,16358));return(t,n,i)=>e.execute((0,r.rS)(t),(0,r.rS)(n),i)}),intersection:a("intersection",()=>n.e(3477).then(n.bind(n,33477)).then(e=>e.execute)),union:a("union",()=>n.e(8673).then(n.bind(n,8673)).then(e=>e.executeMany)),difference:a("difference",async()=>{const e=await n.e(7568).then(n.bind(n,27568));return(t,n)=>c(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),symmetricDifference:a("symmetricDifference",async()=>{const e=await n.e(3083).then(n.bind(n,83083));return(t,n)=>c(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),clip:a("clip",async()=>{const e=await n.e(265).then(n.bind(n,265));return(t,n)=>c(e.execute((0,r.rS)(t),(0,r.rS)(n)))}),cut:a("cut",async()=>{const e=await n.e(4855).then(n.bind(n,34855));return(t,n)=>e.execute((0,r.rS)(t),(0,r.rS)(n)).map(e=>c(e))}),area:a("area",async()=>{const e=await n.e(4866).then(n.bind(n,84866)),{convertFromSpatialReferenceUnit:t,toAreaUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a)=>{const c=e.execute((0,r.rS)(n));return t(n.spatialReference,i(a),c)}}),geodeticArea:a("geodeticArea",async()=>{const e=await n.e(4392).then(n.bind(n,4392)),{convert:t,squareMeters:i,toAreaUnit:a}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,c,o)=>{const s=e.execute((0,r.rS)(n),{curveType:o});return t(i,a(c),s)}}),length:a("length",async()=>{const e=await n.e(7644).then(n.bind(n,67644)),{convertFromSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,r)=>{const a=e.execute(n);return t(n.spatialReference,i(r),a)}}),geodeticLength:a("geodeticLength",async()=>{const e=await n.e(5925).then(n.bind(n,25925)),{convert:t,meters:i,toLengthUnit:a}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,c,o)=>{const s=e.execute((0,r.rS)(n),{curveType:o});return t(i,a(c),s)}}),distance:a("distance",async()=>{const e=await n.e(5744).then(n.bind(n,55744)),{convertFromSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a,c)=>{const o=e.execute((0,r.rS)(n),(0,r.rS)(a));return t(n.spatialReference,i(c),o)}}),densify:a("densify",async()=>{const e=await n.e(8609).then(n.bind(n,8609)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a,o)=>(a=t(i(o),n.spatialReference,a),c(e.execute((0,r.rS)(n),a)))}),geodeticDensify:a("geodeticDensify",async()=>{const e=await n.e(1707).then(n.bind(n,51707)),{convert:t,meters:i,toLengthUnit:a}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,o,s,u)=>(o=t(a(s),i,o),c(e.execute((0,r.rS)(n),o,{curveType:u})))}),generalize:a("generalize",async()=>{const e=await n.e(1373).then(n.bind(n,41373)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,a,o,s)=>(a=t(i(o),n.spatialReference,a),c(e.execute((0,r.rS)(n),a,s)))}),buffer:a("buffer",async()=>{const e=await Promise.all([n.e(9674),n.e(5238)]).then(n.bind(n,65238)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,r,a)=>(r=t(i(a),n.spatialReference,r),e.execute(n,r))}),geodesicBuffer:a("geodesicBuffer",async()=>{const e=await n.e(3749).then(n.bind(n,33749)),{convert:t,meters:i,toLengthUnit:r}=await n.e(1802).then(n.bind(n,41802));return await e.load(),(n,a,c,o)=>(a=t(r(c),i,a),e.execute(n,a,{curveType:o}))}),offset:a("offset",async()=>{const e=await n.e(8635).then(n.bind(n,98635)),{convertToSpatialReferenceUnit:t,toLengthUnit:i}=await n.e(1802).then(n.bind(n,41802));return(n,r,a,c)=>(r=t(i(a),n.spatialReference,r),e.execute(n,r,c))}),rotate:a("rotate",async()=>{const e=await n.e(9678).then(n.bind(n,49678)),{default:t}=await n.e(5178).then(n.bind(n,85178));return(n,i,a,o)=>{const s=(new t).rotate(i,a,o);return c(e.execute((0,r.rS)(n),s))}}),centroid:a("centroid",async()=>{const e=await n.e(2931).then(n.bind(n,82931));return t=>c(e.execute((0,r.rS)(t)))}),labelPoint:a("labelPoint",async()=>{const e=await Promise.all([n.e(135),n.e(3903)]).then(n.bind(n,53903));return t=>c(e.execute((0,r.rS)(t)))}),simplify:a("simplify",()=>n.e(7979).then(n.bind(n,37979)).then(e=>e.execute)),isSelfIntersecting:a("isSelfIntersecting",async()=>{const{NonSimpleResult:e}=await Promise.resolve().then(n.bind(n,15273)),t=await n.e(7948).then(n.bind(n,27948)),i=new Set([5,6,7,10,11,12]);return n=>{const a=new e;return!t.isSimple((0,r.rS)(n),a)&&i.has(a.m_reason)}}),isSimple:a("isSimple",()=>n.e(7979).then(n.bind(n,37979)).then(e=>e.isSimple)),convexHull:a("convexHull",()=>n.e(6048).then(n.bind(n,56048)).then(e=>e.execute)),getNearestCoordinate:a("getNearestCoordinate",async()=>{const e=await n.e(554).then(n.bind(n,50554));return(t,n,a)=>{const o=e.getNearestCoordinate((0,r.rS)(t),(0,r.rS)(n),a);return(0,i.A)((0,i.A)({},o),{},{coordinate:c(o.coordinate)})}}),getNearestVertex:a("getNearestVertex",async()=>{const e=await n.e(554).then(n.bind(n,50554));return(t,n)=>{const a=e.getNearestVertex((0,r.rS)(t),(0,r.rS)(n));return(0,i.A)((0,i.A)({},a),{},{coordinate:c(a.coordinate)})}})};function s(e,t){const n=o[e];return n.loaded?n.execute.apply(void 0,t):n.load().then(()=>s(e,t))}}}]);
//# sourceMappingURL=9957.1e52cb6c.chunk.js.map